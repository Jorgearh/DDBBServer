/* Generated By:JavaCC: Do not edit this line. ParserXML.java */
        public class ParserXML implements ParserXMLConstants {
                public static void main(String[] args) throws ParseException{
                                try{
                                        ParserXML parser = new ParserXML(System.in);
                                        parser.INI();
                                }catch(ParseException pe){
                                        System.err.println("Error en el analisis...");
                                        System.err.println(pe.getMessage());
                                }
                        }

  final public void INI() throws ParseException {
    FILE();
    jj_consume_token(0);
  }

  final public void FILE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      MASTER();
      break;
    case 30:
      DB();
      break;
    case 44:
      TABLE();
      break;
    case 50:
      METHOD();
      break;
    case 60:
      OBJECT();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************************************
MASTER
**************************************************************************************************************/
  final public void MASTER() throws ParseException {
    jj_consume_token(22);
    label_1:
    while (true) {
      L_DB();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(23);
  }

  final public void L_DB() throws ParseException {
    jj_consume_token(24);
    jj_consume_token(25);
    jj_consume_token(id);
    jj_consume_token(26);
    jj_consume_token(27);
    jj_consume_token(path);
    jj_consume_token(28);
    jj_consume_token(29);
  }

/**************************************************************************************************************
DB
**************************************************************************************************************/
  final public void DB() throws ParseException {
    jj_consume_token(30);
    jj_consume_token(31);
    jj_consume_token(27);
    jj_consume_token(path);
    jj_consume_token(28);
    jj_consume_token(32);
    jj_consume_token(33);
    jj_consume_token(27);
    jj_consume_token(path);
    jj_consume_token(28);
    jj_consume_token(34);
    label_2:
    while (true) {
      DB_TABLE();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(35);
  }

  final public void DB_TABLE() throws ParseException {
    jj_consume_token(36);
    jj_consume_token(25);
    jj_consume_token(id);
    jj_consume_token(26);
    jj_consume_token(27);
    jj_consume_token(path);
    jj_consume_token(28);
    jj_consume_token(37);
    label_3:
    while (true) {
      ROWSDEF();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(38);
    jj_consume_token(39);
  }

  final public void ROWSDEF() throws ParseException {
    jj_consume_token(40);
    jj_consume_token(41);
    TIPO();
    jj_consume_token(42);
    jj_consume_token(25);
    jj_consume_token(id);
    jj_consume_token(26);
    jj_consume_token(43);
  }

/**************************************************************************************************************
TABLE
**************************************************************************************************************/
  final public void TABLE() throws ParseException {
    jj_consume_token(44);
    label_4:
    while (true) {
      ROW();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(45);
  }

  final public void ROW() throws ParseException {
    jj_consume_token(40);
    label_5:
    while (true) {
      FIELD();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(43);
  }

  final public void FIELD() throws ParseException {
    jj_consume_token(46);
    jj_consume_token(25);
    jj_consume_token(id);
    jj_consume_token(26);
    jj_consume_token(47);
    VALUE();
    jj_consume_token(48);
    jj_consume_token(49);
  }

/**************************************************************************************************************
METHOD
**************************************************************************************************************/
  final public void METHOD() throws ParseException {
    jj_consume_token(50);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      METODO();
    }
    jj_consume_token(51);
  }

  final public void METODO() throws ParseException {
    jj_consume_token(52);
    jj_consume_token(25);
    jj_consume_token(id);
    jj_consume_token(26);
    jj_consume_token(53);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      ARGUMENTS();
    }
    jj_consume_token(54);
    jj_consume_token(55);
    jj_consume_token(codigo);
    jj_consume_token(56);
    jj_consume_token(57);
  }

  final public void ARGUMENTS() throws ParseException {
    jj_consume_token(58);
    jj_consume_token(41);
    TIPO();
    jj_consume_token(42);
    jj_consume_token(25);
    jj_consume_token(id);
    jj_consume_token(26);
    jj_consume_token(59);
  }

/**************************************************************************************************************
OBJECT
**************************************************************************************************************/
  final public void OBJECT() throws ParseException {
    jj_consume_token(60);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      OBJETO();
    }
    jj_consume_token(61);
  }

  final public void OBJETO() throws ParseException {
    jj_consume_token(62);
    jj_consume_token(25);
    jj_consume_token(id);
    jj_consume_token(26);
    jj_consume_token(63);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_9;
      }
      ATTRIBUTES();
    }
    jj_consume_token(64);
    jj_consume_token(65);
  }

  final public void ATTRIBUTES() throws ParseException {
    jj_consume_token(66);
    jj_consume_token(41);
    TIPO();
    jj_consume_token(42);
    jj_consume_token(25);
    jj_consume_token(id);
    jj_consume_token(26);
    jj_consume_token(67);
  }

/**************************************************************************************************************
COMUN
**************************************************************************************************************/
  final public void TIPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _text:
      jj_consume_token(_text);
      break;
    case _integer:
      jj_consume_token(_integer);
      break;
    case _double:
      jj_consume_token(_double);
      break;
    case _bool:
      jj_consume_token(_bool);
      break;
    case _date:
      jj_consume_token(_date);
      break;
    case _datetime:
      jj_consume_token(_datetime);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VALUE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cadena:
      jj_consume_token(cadena);
      break;
    case entero:
      jj_consume_token(entero);
      break;
    case doble:
      jj_consume_token(doble);
      break;
    case booleano:
      jj_consume_token(booleano);
      break;
    case fecha:
      jj_consume_token(fecha);
      break;
    case fecha_hora:
      jj_consume_token(fecha_hora);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public ParserXMLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40400000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f80,0x7e000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10041000,0x0,0x10,0x100,0x100,0x4000,0x100000,0x4000000,0x40000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public ParserXML(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserXML(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserXMLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserXML(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserXMLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserXML(ParserXMLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserXMLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                }
