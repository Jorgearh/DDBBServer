/* Generated By:JavaCC: Do not edit this line. ParserXMLTokenManager.java */

/** Token Manager. */
public class ParserXMLTokenManager implements ParserXMLConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1f00L) != 0L)
         {
            jjmatchedKind = 20;
            return 59;
         }
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 20;
            return 2;
         }
         return -1;
      case 1:
         if ((active0 & 0x1f80L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
            return 57;
         }
         return -1;
      case 2:
         if ((active0 & 0x1f80L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
            return 57;
         }
         return -1;
      case 3:
         if ((active0 & 0x300L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 20;
               jjmatchedPos = 3;
            }
            return 57;
         }
         if ((active0 & 0x1c80L) != 0L)
            return 57;
         return -1;
      case 4:
         if ((active0 & 0x1300L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 4;
            return 57;
         }
         return -1;
      case 5:
         if ((active0 & 0x200L) != 0L)
            return 57;
         if ((active0 & 0x1100L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
            return 57;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
            return 57;
         }
         if ((active0 & 0x100L) != 0L)
            return 57;
         return -1;
      case 7:
         if ((active0 & 0x1000L) != 0L)
            return 57;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_0(0xffffffffffc00000L, 0xfL);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1a00L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x2b4b2ccd34800000L, active1, 0xbL);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8420000000001800L, active1, 0x4L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x41000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x14000000400000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000100L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000000200000600L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x88000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x121000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x84090104a400000L, active1, 0x9L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000000201000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x820000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x14000000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x208000000800000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000012400000400L, active1, 0x2L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x110000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4a0084080000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000248000001900L, active1, 0x4L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 24);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1208814800000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000101420000200L, active1, 0x2L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x208400000001100L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x420000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x5000000200000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 57);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x84080000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x940000100000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 57);
         return jjMoveStringLiteralDfa4_0(active0, 0x8014000048000000L, active1, 0xdL);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x12000000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 29);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(4, 40);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(4, 55);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x208000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000080000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x5002020202000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x840000000000100L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x14000008000000L, active1, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000400000000L, active1, 0x2L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1501000000200L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x4L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000800000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x208000810401000L, active1, 0x9L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x420800000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x84000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(5, 27);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(5, 37);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(5, 41);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 43);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(5, 56);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x5000000300000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 57);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000941484400100L, active1, 0x2L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x208000010000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000001000L, active1, 0x4L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2208000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x420000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x14000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x9L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x841000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(6, 28);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 36);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(6, 38);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(6, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(6, 47);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000800000000L, active1, 0x4L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000400000000L, active1, 0x2L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x16000080000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x421208100800000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x9L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x840000000001000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x208000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 57);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000000200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(7, 39);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(7, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(7, 49);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(7, 52);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(7, 62);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x9L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x208000100000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 57);
         return jjMoveStringLiteralDfa8_0(active0, 0x840000000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x1004200000400000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x420000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x240000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000400000000L, active1, 0x2L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000080000000L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(8, 33);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(8, 57);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(8, 65);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x2008000000800000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1004200000400000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x840000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0xc00000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8420000000000000L, active1, 0x4L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0x9L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(9, 34);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(9, 58);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000100880000000L, active1, 0x4L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x2008000000800000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x1004200000400000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x840000000000000L, active1, 0x9L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(10, 44);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(10, 53);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(10, 59);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(10, 66);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x1004200100400000L, active1, 0x9L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x2008000000800000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x8040000080000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(11, 22);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(11, 31);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(11, 45);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(11, 50);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(11, 54);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(11, 60);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(11, 63);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(11, 67);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x2008000000800000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(12, 23);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(12, 32);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(12, 51);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(12, 61);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(12, 64);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(13, 30);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(14, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 59;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAdd(57);
                  }
                  else if (curChar == 58)
                     jjCheckNAdd(14);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(22, 24);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(12, 13);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAdd(57);
                  }
                  else if (curChar == 58)
                     jjCheckNAdd(14);
                  break;
               case 8:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 34 && kind > 18)
                     kind = 18;
                  break;
               case 11:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 39 && kind > 19)
                     kind = 19;
                  break;
               case 14:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 14);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjAddStates(7, 8);
                  break;
               case 18:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(22, 24);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(23, 22);
                  break;
               case 23:
                  if (curChar == 45)
                     jjCheckNAdd(22);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 25:
                  if (curChar == 45)
                     jjCheckNAdd(24);
                  break;
               case 26:
                  if (curChar == 46)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(0, 6);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(57);
                  break;
               case 58:
                  if (curChar == 58)
                     jjCheckNAdd(14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 59:
               case 57:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(57);
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAdd(57);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0x2000000020L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 1:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(0);
                  break;
               case 4:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(0);
                  break;
               case 5:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  jjAddStates(12, 13);
                  break;
               case 12:
                  jjAddStates(14, 15);
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(16, 19);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(16, 14);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(20);
                  break;
               case 56:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(14, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 59 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   23, 22, 25, 24, 26, 29, 38, 17, 18, 25, 24, 26, 9, 10, 12, 13, 
   16, 14, 17, 18, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xfL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[59];
private final int[] jjstateSet = new int[118];
protected char curChar;
/** Constructor. */
public ParserXMLTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserXMLTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 59; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
