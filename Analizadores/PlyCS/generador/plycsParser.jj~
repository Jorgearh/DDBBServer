options{
	STATIC = false;
}

PARSER_BEGIN(PlyCSParser)
	
	public class Ejercicio{
		public static void main(String[] args) throws ParseException{
				try{
					new Ejercicio(new java.io.StringReader(scanner.nextLine())).INI();
				}catch(ParseException pe){
					System.err.println("Error en el analisis...");
					System.err.println(pe.getMessage());
				}
			}
			scanner.close();
		}
	}
	
	
PARSER_END(PlyCSParser)



SKIP :
{
	 " "
	|"\t"
	|"\r"
}

TOKEN :
{
	 <nl: "\n">
	|<exit: "exit" | "quit">
}


TOKEN :
{
	 <coma: ",">
	|<caracter: "char">
	|<entero: "int">
}

TOKEN :
{
	<id: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}


void INI() : {}
{
	S() <EOF>
}

void S() : {} 
{
	 DEC()	{}
	|<nl>
	|<exit>		{
					System.out.println("...!");
					System.exit(0);
				}
	|			{
					return;
				}
}



void DEC() : 
{
	String tipo;
}
{
	tipo = T() LID(tipo)
}

void LID(String tipo) : 
{
	Token var;
}
{
	var = <id>	{
					System.out.println(var.image + " es de tipo " + tipo);
				} 
				LIDP(tipo)
}

void LIDP(String tipo) : 
{
	Token var;
}
{
	<coma> var = <id>	{
							System.out.println(var.image + " es de tipo " + tipo);
						} 
						LIDP(tipo)
	|{return;}
}

String T() :
{
	Token tipo;
}
{
	(
	 tipo = <caracter>
	|tipo = <entero>
	)
	{return tipo.image;}
}
