options{
	STATIC = false;
	IGNORE_CASE = true;
	OUTPUT_DIRECTORY = "analizador/";
}

PARSER_BEGIN(ParserUSQL)
	public class ParserUSQL{
		public static void main(String[] args) throws ParseException{
				try{
					ParserUSQL parser = new ParserUSQL(System.in);
					parser.INI();
				}catch(ParseException pe){
					System.err.println("Error en el analisis...");
					System.err.println(pe.getMessage());
				}
			}
		}
PARSER_END(ParserUSQL)

SKIP :
{
	 " "
	|"\n"
	|"\t"
	|"\r"
}

SPECIAL_TOKEN :
{
	 <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
	|<MULTI_LINE_COMMENT: "#*" (~[]) "*#">
}

TOKEN :
{
	 <#letra: ["a" - "z"] >
	|<#digito: ["0" - "9"]>
}

TOKEN :
{
	 <_text: "Text">
	|<_integer: "Integer">
	|<_double: "Double">
	|<_bool: "Bool">
	|<_date: "Date">
	|<_datetime: "DateTime">
}

TOKEN :
{
	 <crear: "CREAR">
	|<usar: "USAR">
	|<alterar: "ALTERAR">
	|<eliminar: "ELIMINAR">

	|<base_datos: "BASE_DATOS">
	|<tabla: "TABLA">
	|<objeto: "OBJETO">
	|<procedimiento: "PROCEDIMIENTO">
	|<funcion: "FUNCION">
	|<usuario: "USUARIO">

	|<nulo: "Nulo">
	|<no_nulo: "No Nulo">
	|<llave_primaria: "Llave_primaria">
	|<llave_foranea: "Llave_foranea">
	|<unico: "Unico">
	|<autoincrementable: "Autoincrementable">

	|<colocar: "COLOCAR">
	|<password: "password">
	|<quitar: "QUITAR">
	|<agregar: "AGREGAR">
	|<cambiar: "CAMBIAR">

	|<insertar: "INSERTAR">
	|<seleccionar: "SELECCIONAR">
	|<actualizar: "ACTUALIZAR">
	|<borrar: "BORRAR">

	|<en: "EN">
	|<de: "DE">
	|<donde: "DONDE">
	|<valores: "VALORES">
	|<ordenar: "ORDENAR">
	|<por: "POR">
	|<asc: "ASC">
	|<desc: "DESC">

	|<otorgar: "OTORGAR">
	|<denegar: "DENEGAR">
	|<permisos: "PERMISOS">

	|<backup: "BACKUP">
	|<restaurar: "RESTAURAR">
	|<usqldump: "USQLDUMP">
	|<completo: "COMPLETO">

	|<declarar: "DECLARAR">
	|<si: "SI">
	|<sino: "SINO">
	|<para: "PARA">
	|<selecciona: "SELECCIONA">
	|<caso: "CASO">
	|<defecto: "DEFECTO">
	|<mientras: "MIENTRAS">
	|<detener: "DETENER">
	|<retorno: "RETORNO">
	|<contar: "CONTAR">
	|<imprimir: "IMPRIMIR">
	|<get_fecha: "FECHA">
	|<get_fecha_hora: "FECHA_HORA">



}

TOKEN :
{
	 <entero: (("-")? <digito>)+ >
	|<doble: (("-")? <digito>)+ "." (<digito>)+>
	|<booleano: "true" | "false" >
	|<fecha: <digito><digito>"-"<digito><digito>"-"<digito><digito><digito><digito>>
	|<fecha_hora: <fecha> " " <digito><digito> ":" <digito><digito> ":" <digito><digito>>
	|<cadena: ("\"") (~["\"", "\n", "\r"])* ("\"") >
	|<id: <letra> (<letra> | <digito> | "_")* >
	|<var: "@"<id>>
	|<path: (<letra> ":")? "/" (<id> "/")* <id> ("." <id>)?>
}


void INI() : {}
{
	SENTENCIAS_USQL() <EOF>
}

void SENTENCIAS_USQL() : {}
{
	( SENTENCIA_USQL() ";" )*
}

void SENTENCIA_USQL() : {}
{
	 DDL()
	|DML()
	|DCL()

	|CALL()
	|SSL_IMPRIMIR()
}


/**************************************************************************************************************
	SENTENCIAS_USQL DDL
**************************************************************************************************************/
void DDL() : {}
{
	 <crear> DDL_CREATE()
	|<usar> <id>
	|<alterar> DDL_ALTER()
	|<eliminar> USQL_OBJECT_NAME() <id>
}


/**************************************************************************************************************
			SENTENCIAS_USQL DDL CREATE
**************************************************************************************************************/
void DDL_CREATE() : {}
{
	 DDL_CREATE_DB()
	|DDL_CREATE_TABLE()
	|DDL_CREATE_OBJECT()
	|DDL_CREATE_PROC()
	|DDL_CREATE_FUNC()
	|DDL_CREATE_USER()
}

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE DB
**************************************************************************************************************/
void DDL_CREATE_DB() : {}
{
	<base_datos> <id>
}

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE TABLE
**************************************************************************************************************/
void DDL_CREATE_TABLE() : {}
{
	<tabla> <id> "(" L_DEC_CAMPO() ")"
}

void L_DEC_CAMPO() : {}
{
	DEC_CAMPO() ( "," DEC_CAMPO() )*
}

void DEC_CAMPO() : {}
{
	TIPO_DATO() <id> ( COMPLEMENTO_CAMPO() )*
}

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE OBJECT
**************************************************************************************************************/
void DDL_CREATE_OBJECT() : {}
{
	<objeto> <id> "(" L_DEC_ATR() ")"
}

void L_DEC_ATR() : {}
{
	DEC_ATRIBUTO() ( "," DEC_ATRIBUTO())*
}

void DEC_ATRIBUTO() : {}
{
	TIPO_DATO() <id>
}

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE PROCEDURE
**************************************************************************************************************/
void DDL_CREATE_PROC() : {}
{
	<procedimiento> <id> "(" [ L_ARG() ] ")" CUERPO()
}

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE FUNCTION
**************************************************************************************************************/
void DDL_CREATE_FUNC() : {}
{
	<funcion> <id> "(" [ L_ARG() ] ")" TIPO_DATO() CUERPO()
}

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE USER
**************************************************************************************************************/
void DDL_CREATE_USER() : {}
{
	<usuario> <id> <colocar> <password> "=" <cadena>
}


/**************************************************************************************************************
			SENTENCIAS_USQL DDL ALTER
**************************************************************************************************************/
void DDL_ALTER() : {}
{
	 DDL_ALTER_TABLE()
	|DDL_ALTER_OBJECT()
	|DDL_ALTER_USER()
}

/**************************************************************************************************************
					SENTENCIAS_USQL DDL ALTER TABLE
**************************************************************************************************************/
void DDL_ALTER_TABLE() : {}
{
	<tabla> <id> ( ADD() | QUIT() )
}

void ADD() : {}
{
	<agregar> "(" L_DEC_CAMPO() ")"
}

void QUIT() : {}
{
	<quitar> L_ID()
}
/**************************************************************************************************************
					SENTENCIAS_USQL DDL ALTER OBJECT
**************************************************************************************************************/
void DDL_ALTER_OBJECT() : {}
{
	<objeto> <id> ( ADD() | QUIT() )
}

/**************************************************************************************************************
					SENTENCIAS_USQL DDL ALTER USER
**************************************************************************************************************/
void DDL_ALTER_USER() : {}
{
	<usuario> <id> <cambiar> <password> "=" <cadena>
}


/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/**************************************************************************************************************
	SENTENCIAS_USQL DML
**************************************************************************************************************/
void DML() : {}
{
	 DML_INSERT()
	|DML_UPDATE()
	|DML_DELETE()
	|DML_SELECT()
}

/**************************************************************************************************************
			SENTENCIAS_USQL DML INSERT IN TABLE
**************************************************************************************************************/
void DML_INSERT() : {}
{
	<insertar> <en> <tabla> <id>  [LOOKAHEAD(2) "(" L_ID() ")" <valores> ] "(" L_VAL() ")"
}


/**************************************************************************************************************
			SENTENCIAS_USQL DML UPDATE
**************************************************************************************************************/
void DML_UPDATE() : {}
{
	<actualizar> <tabla> <id> "(" L_ID() ")" <valores> "(" L_VAL() ")" [ <donde> /*COND()*/ ]
}

/**************************************************************************************************************
			SENTENCIAS_USQL DML DELETE
**************************************************************************************************************/
void DML_DELETE() : {}
{
	<borrar> <en> <tabla> <id> 	[ <donde> /*COND()*/ ]
}

/**************************************************************************************************************
			SENTENCIAS_USQL DML SELECT
**************************************************************************************************************/
void DML_SELECT() : {}
{
	<seleccionar> ( L_ID() | "*" ) <de> L_ID() [ <donde> /*COND()*/ [ <ordenar> <por> (<asc> | <desc>) ] ]
}


/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/**************************************************************************************************************
	SENTENCIAS_USQL DCL
**************************************************************************************************************/
void DCL() : {}
{
	 DCL_OTORGAR()
	|DCL_DENEGAR()
}

/**************************************************************************************************************
			SENTENCIAS_USQL DCL OTORGAR
**************************************************************************************************************/
void DCL_OTORGAR() : {}
{
	<otorgar> <permisos> <id> "," <id> "." ( <id> | "*" )
}

/**************************************************************************************************************
			SENTENCIAS_USQL DCL DENEGAR
**************************************************************************************************************/
void DCL_DENEGAR() : {}
{
	<denegar> <permisos> <id> "," <id> "." ( <id> | "*" )
}



/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/**************************************************************************************************************
	SENTENCIAS_USQL SSL
**************************************************************************************************************/

void SSL() : {}
{
	 SSL_DEC_VAR_OBJ() ";"
	|SSL_ASG_VAR_ATR() ";"
	|SSL_SI()
	|SSL_SELECCIONA()
	|SSL_PARA()
	|SSL_MIENTRAS()
	|SSL_DETENER() ";"
	|SSL_RETORNO() ";"
	|SSL_IMPRIMIR() ";"
	|SSL_FECHA() ";"
	|SSL_FECHA_HORA() ";"
	|SSL_CONTAR() ";"

	|CALL() ";"
}

/**************************************************************************************************************
			SENTENCIAS_USQL SSL DECLARAR VARIABLE
**************************************************************************************************************/
void SSL_DEC_VAR_OBJ() : {}
{
	<declarar> L_VAR() ( TIPO_DATO() [ "=" EXPRESION() ] | <id>)
}

/**************************************************************************************************************
			SENTENCIAS_USQL SSL ASIGNAR VARIABLE
**************************************************************************************************************/
void SSL_ASG_VAR_ATR() : {}
{
	<var> [ "." <id> ] "=" EXPRESION()
}

/**************************************************************************************************************
			SENTENCIAS_USQL SSL SI
**************************************************************************************************************/
void SSL_SI() : {}
{
	<si> CONDICION() CUERPO() [ <sino> CUERPO()]
}

/**************************************************************************************************************
			SENTENCIAS_USQL SSL SELECCIONA
**************************************************************************************************************/
void SSL_SELECCIONA() : {}
{
	<selecciona> "(" EXPRESION() ")" "{" L_CASO() [ <defecto> ":" INSTRUCCIONES() ] "}"
}

void L_CASO() : {}
{
	CASO() ( CASO() )*
}

void CASO() : {}
{
	<caso> VAL_CASO() ":" INSTRUCCIONES()
}

void VAL_CASO() : {}
{
	 <cadena>
	|<entero>
	|<doble>
}

/**************************************************************************************************************
			SENTENCIAS_USQL SSL PARA
**************************************************************************************************************/
void SSL_PARA() : {}
{
	<para> "(" <declarar> <var> <_integer> "=" EXPRESION() ";" COND() ";" ( "++" | "--" ) ")" CUERPO()
}

/**************************************************************************************************************
			SENTENCIAS_USQL SSL MIENTRAS
**************************************************************************************************************/
void SSL_MIENTRAS() : {}
{
	<mientras> CONDICION() CUERPO()
}

/**************************************************************************************************************
			SENTENCIAS_USQL SSL DETENER
**************************************************************************************************************/
void SSL_DETENER() : {}
{
	<detener>
}

/**************************************************************************************************************
			SENTENCIAS_USQL SSL RETORNAR
**************************************************************************************************************/
void SSL_RETORNO() : {}
{
	<retorno> EXPRESION()
}


/**************************************************************************************************************
			SENTENCIAS_USQL SSL IMPRIMIR
**************************************************************************************************************/
void SSL_IMPRIMIR() : {}
{
	<imprimir> "(" EXPRESION() ")"
}

/**************************************************************************************************************
			SENTENCIAS_USQL SSL FECHA
**************************************************************************************************************/
void SSL_FECHA() : {}
{
	<get_fecha> "(" ")"
}

/**************************************************************************************************************
			SENTENCIAS_USQL SSL FECHA HORA
**************************************************************************************************************/
void SSL_FECHA_HORA() : {}
{
	<get_fecha_hora> "(" ")"
}

/**************************************************************************************************************
			SENTENCIAS_USQL SSL CONTAR
**************************************************************************************************************/
void SSL_CONTAR() : {}
{
	<contar> "(" "<<" DML_SELECT() ">>" ")"
}



/**************************************************************************************************************
			SENTENCIAS_USQL SSL BACKUP
**************************************************************************************************************/
void BACKUP() : {}
{
	<backup> ( <usqldump> | <completo> ) <id> <id> ";"
}

/**************************************************************************************************************
			SENTENCIAS_USQL SSL RESTAURAR
**************************************************************************************************************/
void RESTAURAR() : {}
{
	<restaurar> ( <usqldump> | <completo> ) <cadena>
}


/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/**************************************************************************************************************
			SENTENCIAS_USQL SSL EXPRESIONES
**************************************************************************************************************/

void EXPRESION() : {}
{
	COND()
}

void COND() : {}
{
	COND_OR()
}

void COND_OR() : {}
{
	COND_AND() ( "||" COND_AND() )*
}

void COND_AND() : {}
{
	COND_NOT() ( "&&" COND_NOT() )*
}

void COND_NOT() : {}
{
	[ "!" ] REL()
}

void REL() : {}
{
	AR_ADD() ( OPREL() AR_ADD() )*
}

void AR_ADD() : {}
{
	AR_MUL() ( ( "+" | "-") AR_MUL() )*
}

void AR_MUL() : {}
{
	AR_POW() ( ( "*" | "/" ) AR_POW() )*
}

void AR_POW() : {}
{
	AR_B() ( "^" AR_B() )*
}

void AR_B() : {}
{
	 "(" EXPRESION() ")"
	|VAL()
	|LOOKAHEAD(2)<id>
	|<var> [ "." <id> ]
	|CALL()
	|SSL_FECHA()
	|SSL_FECHA_HORA()
	|SSL_SELECCIONA()
}

void CALL() : {}
{
	<id> "(" [ L_VAL() ] ")"
}

/**************************************************************************************************************
								COMUN
**************************************************************************************************************/

void CONDICION() : {}
{
	"(" COND() ")"
}

void CUERPO() : {}
{
	"{" INSTRUCCIONES() "}"
}


void INSTRUCCIONES() : {}
{
	  ( INSTRUCCION() )*
}

void INSTRUCCION() : {}
{
	DML()
   |SSL()
}

void L_ARG() : {}
{
	ARG() ( "," ARG() )*
}

void ARG() : {}
{
	( TIPO_DATO() | <id> ) <var>
}


void L_ID() : {}
{
	<id> ( "," <id> )*
}

void L_VAL() : {}
{
	VAL() ( "," VAL() )*
}

void VAL() : {}
{
	 <entero>
	|<doble>
	|<booleano>
	|<cadena>
	|<fecha>
	|<fecha_hora>
}

void L_VAR() : {}
{
	<var> ( "," <var> )*
}

void USQL_OBJECT_NAME() : {}
{
	 <tabla>
	|<base_datos>
	|<objeto>
	|<usuario>
}

void TIPO_DATO() : {}
{
	 <_text>
	|<_integer>
	|<_double>
	|<_bool>
	|<_date>
	|<_datetime>
}

void COMPLEMENTO_CAMPO() : {}
{
	 <nulo>
	|<no_nulo>
	|<autoincrementable>
	|<llave_primaria>
	|<llave_foranea> <id> <id>
	|<unico>
}

void OPREL() : {}
{
	 "=="
	|"!="
	|"<"
	|"<="
	|">"
	|">="
}
