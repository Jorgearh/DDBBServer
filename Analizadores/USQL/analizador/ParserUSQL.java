/* Generated By:JavaCC: Do not edit this line. ParserUSQL.java */
        public class ParserUSQL implements ParserUSQLConstants {
                public static void main(String[] args) throws ParseException{
                                try{
                                        ParserUSQL parser = new ParserUSQL(System.in);
                                        parser.INI();
                                }catch(ParseException pe){
                                        System.err.println("Error en el analisis...");
                                        System.err.println(pe.getMessage());
                                }
                        }

  final public void INI() throws ParseException {
    SENTENCIAS_USQL();
    jj_consume_token(0);
  }

  final public void SENTENCIAS_USQL() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case crear:
      case usar:
      case alterar:
      case eliminar:
      case insertar:
      case seleccionar:
      case actualizar:
      case borrar:
      case otorgar:
      case denegar:
      case imprimir:
      case id:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      SENTENCIA_USQL();
      jj_consume_token(78);
    }
  }

  final public void SENTENCIA_USQL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case crear:
    case usar:
    case alterar:
    case eliminar:
      DDL();
      break;
    case insertar:
    case seleccionar:
    case actualizar:
    case borrar:
      DML();
      break;
    case otorgar:
    case denegar:
      DCL();
      break;
    case id:
      CALL();
      break;
    case imprimir:
      SSL_IMPRIMIR();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************************************
	SENTENCIAS_USQL DDL
**************************************************************************************************************/
  final public void DDL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case crear:
      jj_consume_token(crear);
      DDL_CREATE();
      break;
    case usar:
      jj_consume_token(usar);
      jj_consume_token(id);
      break;
    case alterar:
      jj_consume_token(alterar);
      DDL_ALTER();
      break;
    case eliminar:
      jj_consume_token(eliminar);
      USQL_OBJECT_NAME();
      jj_consume_token(id);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DDL CREATE
**************************************************************************************************************/
  final public void DDL_CREATE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case base_datos:
      DDL_CREATE_DB();
      break;
    case tabla:
      DDL_CREATE_TABLE();
      break;
    case objeto:
      DDL_CREATE_OBJECT();
      break;
    case procedimiento:
      DDL_CREATE_PROC();
      break;
    case funcion:
      DDL_CREATE_FUNC();
      break;
    case usuario:
      DDL_CREATE_USER();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE DB
**************************************************************************************************************/
  final public void DDL_CREATE_DB() throws ParseException {
    jj_consume_token(base_datos);
    jj_consume_token(id);
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE TABLE
**************************************************************************************************************/
  final public void DDL_CREATE_TABLE() throws ParseException {
    jj_consume_token(tabla);
    jj_consume_token(id);
    jj_consume_token(79);
    L_DEC_CAMPO();
    jj_consume_token(80);
  }

  final public void L_DEC_CAMPO() throws ParseException {
    DEC_CAMPO();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 81:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(81);
      DEC_CAMPO();
    }
  }

  final public void DEC_CAMPO() throws ParseException {
    TIPO_DATO();
    jj_consume_token(id);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case nulo:
      case no_nulo:
      case llave_primaria:
      case llave_foranea:
      case unico:
      case autoincrementable:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      COMPLEMENTO_CAMPO();
    }
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE OBJECT
**************************************************************************************************************/
  final public void DDL_CREATE_OBJECT() throws ParseException {
    jj_consume_token(objeto);
    jj_consume_token(id);
    jj_consume_token(79);
    L_DEC_ATR();
    jj_consume_token(80);
  }

  final public void L_DEC_ATR() throws ParseException {
    DEC_ATRIBUTO();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 81:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(81);
      DEC_ATRIBUTO();
    }
  }

  final public void DEC_ATRIBUTO() throws ParseException {
    TIPO_DATO();
    jj_consume_token(id);
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE PROCEDURE
**************************************************************************************************************/
  final public void DDL_CREATE_PROC() throws ParseException {
    jj_consume_token(procedimiento);
    jj_consume_token(id);
    jj_consume_token(79);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _text:
    case _integer:
    case _double:
    case _bool:
    case _date:
    case _datetime:
    case id:
      L_ARG();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(80);
    CUERPO();
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE FUNCTION
**************************************************************************************************************/
  final public void DDL_CREATE_FUNC() throws ParseException {
    jj_consume_token(funcion);
    jj_consume_token(id);
    jj_consume_token(79);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _text:
    case _integer:
    case _double:
    case _bool:
    case _date:
    case _datetime:
    case id:
      L_ARG();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(80);
    TIPO_DATO();
    CUERPO();
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE USER
**************************************************************************************************************/
  final public void DDL_CREATE_USER() throws ParseException {
    jj_consume_token(usuario);
    jj_consume_token(id);
    jj_consume_token(colocar);
    jj_consume_token(password);
    jj_consume_token(82);
    jj_consume_token(cadena);
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DDL ALTER
**************************************************************************************************************/
  final public void DDL_ALTER() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tabla:
      DDL_ALTER_TABLE();
      break;
    case objeto:
      DDL_ALTER_OBJECT();
      break;
    case usuario:
      DDL_ALTER_USER();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL ALTER TABLE
**************************************************************************************************************/
  final public void DDL_ALTER_TABLE() throws ParseException {
    jj_consume_token(tabla);
    jj_consume_token(id);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case agregar:
      ADD();
      break;
    case quitar:
      QUIT();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ADD() throws ParseException {
    jj_consume_token(agregar);
    jj_consume_token(79);
    L_DEC_CAMPO();
    jj_consume_token(80);
  }

  final public void QUIT() throws ParseException {
    jj_consume_token(quitar);
    L_ID();
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL ALTER OBJECT
**************************************************************************************************************/
  final public void DDL_ALTER_OBJECT() throws ParseException {
    jj_consume_token(objeto);
    jj_consume_token(id);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case agregar:
      ADD();
      break;
    case quitar:
      QUIT();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL ALTER USER
**************************************************************************************************************/
  final public void DDL_ALTER_USER() throws ParseException {
    jj_consume_token(usuario);
    jj_consume_token(id);
    jj_consume_token(cambiar);
    jj_consume_token(password);
    jj_consume_token(82);
    jj_consume_token(cadena);
  }

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/**************************************************************************************************************
	SENTENCIAS_USQL DML
**************************************************************************************************************/
  final public void DML() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case insertar:
      DML_INSERT();
      break;
    case actualizar:
      DML_UPDATE();
      break;
    case borrar:
      DML_DELETE();
      break;
    case seleccionar:
      DML_SELECT();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DML INSERT IN TABLE
**************************************************************************************************************/
  final public void DML_INSERT() throws ParseException {
    jj_consume_token(insertar);
    jj_consume_token(en);
    jj_consume_token(tabla);
    jj_consume_token(id);
    if (jj_2_1(2)) {
      jj_consume_token(79);
      L_ID();
      jj_consume_token(80);
      jj_consume_token(valores);
    } else {
      ;
    }
    jj_consume_token(79);
    L_VAL();
    jj_consume_token(80);
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DML UPDATE
**************************************************************************************************************/
  final public void DML_UPDATE() throws ParseException {
    jj_consume_token(actualizar);
    jj_consume_token(tabla);
    jj_consume_token(id);
    jj_consume_token(79);
    L_ID();
    jj_consume_token(80);
    jj_consume_token(valores);
    jj_consume_token(79);
    L_VAL();
    jj_consume_token(80);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case donde:
      jj_consume_token(donde);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DML DELETE
**************************************************************************************************************/
  final public void DML_DELETE() throws ParseException {
    jj_consume_token(borrar);
    jj_consume_token(en);
    jj_consume_token(tabla);
    jj_consume_token(id);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case donde:
      jj_consume_token(donde);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DML SELECT
**************************************************************************************************************/
  final public void DML_SELECT() throws ParseException {
    jj_consume_token(seleccionar);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
      L_ID();
      break;
    case 83:
      jj_consume_token(83);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(de);
    L_ID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case donde:
      jj_consume_token(donde);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ordenar:
        jj_consume_token(ordenar);
        jj_consume_token(por);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case asc:
          jj_consume_token(asc);
          break;
        case desc:
          jj_consume_token(desc);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/**************************************************************************************************************
	SENTENCIAS_USQL DCL
**************************************************************************************************************/
  final public void DCL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case otorgar:
      DCL_OTORGAR();
      break;
    case denegar:
      DCL_DENEGAR();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DCL OTORGAR
**************************************************************************************************************/
  final public void DCL_OTORGAR() throws ParseException {
    jj_consume_token(otorgar);
    jj_consume_token(permisos);
    jj_consume_token(id);
    jj_consume_token(81);
    jj_consume_token(id);
    jj_consume_token(84);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
      jj_consume_token(id);
      break;
    case 83:
      jj_consume_token(83);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DCL DENEGAR
**************************************************************************************************************/
  final public void DCL_DENEGAR() throws ParseException {
    jj_consume_token(denegar);
    jj_consume_token(permisos);
    jj_consume_token(id);
    jj_consume_token(81);
    jj_consume_token(id);
    jj_consume_token(84);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
      jj_consume_token(id);
      break;
    case 83:
      jj_consume_token(83);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/**************************************************************************************************************
	SENTENCIAS_USQL SSL
**************************************************************************************************************/
  final public void SSL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case declarar:
      SSL_DEC_VAR_OBJ();
      jj_consume_token(78);
      break;
    case var:
      SSL_ASG_VAR_ATR();
      jj_consume_token(78);
      break;
    case si:
      SSL_SI();
      break;
    case selecciona:
      SSL_SELECCIONA();
      break;
    case para:
      SSL_PARA();
      break;
    case mientras:
      SSL_MIENTRAS();
      break;
    case detener:
      SSL_DETENER();
      jj_consume_token(78);
      break;
    case retorno:
      SSL_RETORNO();
      jj_consume_token(78);
      break;
    case imprimir:
      SSL_IMPRIMIR();
      jj_consume_token(78);
      break;
    case get_fecha:
      SSL_FECHA();
      jj_consume_token(78);
      break;
    case get_fecha_hora:
      SSL_FECHA_HORA();
      jj_consume_token(78);
      break;
    case contar:
      SSL_CONTAR();
      jj_consume_token(78);
      break;
    case id:
      CALL();
      jj_consume_token(78);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL DECLARAR VARIABLE
**************************************************************************************************************/
  final public void SSL_DEC_VAR_OBJ() throws ParseException {
    jj_consume_token(declarar);
    L_VAR();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _text:
    case _integer:
    case _double:
    case _bool:
    case _date:
    case _datetime:
      TIPO_DATO();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 82:
        jj_consume_token(82);
        EXPRESION();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      break;
    case id:
      jj_consume_token(id);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL ASIGNAR VARIABLE
**************************************************************************************************************/
  final public void SSL_ASG_VAR_ATR() throws ParseException {
    jj_consume_token(var);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 84:
      jj_consume_token(84);
      jj_consume_token(id);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(82);
    EXPRESION();
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL SI
**************************************************************************************************************/
  final public void SSL_SI() throws ParseException {
    jj_consume_token(si);
    CONDICION();
    CUERPO();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case sino:
      jj_consume_token(sino);
      CUERPO();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL SELECCIONA
**************************************************************************************************************/
  final public void SSL_SELECCIONA() throws ParseException {
    jj_consume_token(selecciona);
    jj_consume_token(79);
    EXPRESION();
    jj_consume_token(80);
    jj_consume_token(85);
    L_CASO();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case defecto:
      jj_consume_token(defecto);
      jj_consume_token(86);
      INSTRUCCIONES();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(87);
  }

  final public void L_CASO() throws ParseException {
    CASO();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case caso:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_5;
      }
      CASO();
    }
  }

  final public void CASO() throws ParseException {
    jj_consume_token(caso);
    VAL_CASO();
    jj_consume_token(86);
    INSTRUCCIONES();
  }

  final public void VAL_CASO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cadena:
      jj_consume_token(cadena);
      break;
    case entero:
      jj_consume_token(entero);
      break;
    case doble:
      jj_consume_token(doble);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL PARA
**************************************************************************************************************/
  final public void SSL_PARA() throws ParseException {
    jj_consume_token(para);
    jj_consume_token(79);
    jj_consume_token(declarar);
    jj_consume_token(var);
    jj_consume_token(_integer);
    jj_consume_token(82);
    EXPRESION();
    jj_consume_token(78);
    COND();
    jj_consume_token(78);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 88:
      jj_consume_token(88);
      break;
    case 89:
      jj_consume_token(89);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(80);
    CUERPO();
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL MIENTRAS
**************************************************************************************************************/
  final public void SSL_MIENTRAS() throws ParseException {
    jj_consume_token(mientras);
    CONDICION();
    CUERPO();
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL DETENER
**************************************************************************************************************/
  final public void SSL_DETENER() throws ParseException {
    jj_consume_token(detener);
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL RETORNAR
**************************************************************************************************************/
  final public void SSL_RETORNO() throws ParseException {
    jj_consume_token(retorno);
    EXPRESION();
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL IMPRIMIR
**************************************************************************************************************/
  final public void SSL_IMPRIMIR() throws ParseException {
    jj_consume_token(imprimir);
    jj_consume_token(79);
    EXPRESION();
    jj_consume_token(80);
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL FECHA
**************************************************************************************************************/
  final public void SSL_FECHA() throws ParseException {
    jj_consume_token(get_fecha);
    jj_consume_token(79);
    jj_consume_token(80);
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL FECHA HORA
**************************************************************************************************************/
  final public void SSL_FECHA_HORA() throws ParseException {
    jj_consume_token(get_fecha_hora);
    jj_consume_token(79);
    jj_consume_token(80);
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL CONTAR
**************************************************************************************************************/
  final public void SSL_CONTAR() throws ParseException {
    jj_consume_token(contar);
    jj_consume_token(79);
    jj_consume_token(90);
    DML_SELECT();
    jj_consume_token(91);
    jj_consume_token(80);
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL BACKUP
**************************************************************************************************************/
  final public void BACKUP() throws ParseException {
    jj_consume_token(backup);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case usqldump:
      jj_consume_token(usqldump);
      break;
    case completo:
      jj_consume_token(completo);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(id);
    jj_consume_token(id);
    jj_consume_token(78);
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL RESTAURAR
**************************************************************************************************************/
  final public void RESTAURAR() throws ParseException {
    jj_consume_token(restaurar);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case usqldump:
      jj_consume_token(usqldump);
      break;
    case completo:
      jj_consume_token(completo);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(cadena);
  }

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/**************************************************************************************************************
			SENTENCIAS_USQL SSL EXPRESIONES
**************************************************************************************************************/
  final public void EXPRESION() throws ParseException {
    COND();
  }

  final public void COND() throws ParseException {
    COND_OR();
  }

  final public void COND_OR() throws ParseException {
    COND_AND();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_6;
      }
      jj_consume_token(92);
      COND_AND();
    }
  }

  final public void COND_AND() throws ParseException {
    COND_NOT();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_7;
      }
      jj_consume_token(93);
      COND_NOT();
    }
  }

  final public void COND_NOT() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 94:
      jj_consume_token(94);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    REL();
  }

  final public void REL() throws ParseException {
    AR_ADD();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_8;
      }
      OPREL();
      AR_ADD();
    }
  }

  final public void AR_ADD() throws ParseException {
    AR_MUL();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
      case 96:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        break;
      case 96:
        jj_consume_token(96);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AR_MUL();
    }
  }

  final public void AR_MUL() throws ParseException {
    AR_POW();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
      case 97:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
        jj_consume_token(83);
        break;
      case 97:
        jj_consume_token(97);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AR_POW();
    }
  }

  final public void AR_POW() throws ParseException {
    AR_B();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 98:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_11;
      }
      jj_consume_token(98);
      AR_B();
    }
  }

  final public void AR_B() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 79:
      jj_consume_token(79);
      EXPRESION();
      jj_consume_token(80);
      break;
    case entero:
    case doble:
    case booleano:
    case fecha:
    case fecha_hora:
    case cadena:
      VAL();
      break;
    default:
      jj_la1[43] = jj_gen;
      if (jj_2_2(2)) {
        jj_consume_token(id);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case var:
          jj_consume_token(var);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 84:
            jj_consume_token(84);
            jj_consume_token(id);
            break;
          default:
            jj_la1[42] = jj_gen;
            ;
          }
          break;
        case id:
          CALL();
          break;
        case get_fecha:
          SSL_FECHA();
          break;
        case get_fecha_hora:
          SSL_FECHA_HORA();
          break;
        case selecciona:
          SSL_SELECCIONA();
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void CALL() throws ParseException {
    jj_consume_token(id);
    jj_consume_token(79);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case entero:
    case doble:
    case booleano:
    case fecha:
    case fecha_hora:
    case cadena:
      L_VAL();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    jj_consume_token(80);
  }

/**************************************************************************************************************
								COMUN
**************************************************************************************************************/
  final public void CONDICION() throws ParseException {
    jj_consume_token(79);
    COND();
    jj_consume_token(80);
  }

  final public void CUERPO() throws ParseException {
    jj_consume_token(85);
    INSTRUCCIONES();
    jj_consume_token(87);
  }

  final public void INSTRUCCIONES() throws ParseException {
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case insertar:
      case seleccionar:
      case actualizar:
      case borrar:
      case declarar:
      case si:
      case para:
      case selecciona:
      case mientras:
      case detener:
      case retorno:
      case contar:
      case imprimir:
      case get_fecha:
      case get_fecha_hora:
      case id:
      case var:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_12;
      }
      INSTRUCCION();
    }
  }

  final public void INSTRUCCION() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case insertar:
    case seleccionar:
    case actualizar:
    case borrar:
      DML();
      break;
    case declarar:
    case si:
    case para:
    case selecciona:
    case mientras:
    case detener:
    case retorno:
    case contar:
    case imprimir:
    case get_fecha:
    case get_fecha_hora:
    case id:
    case var:
      SSL();
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void L_ARG() throws ParseException {
    ARG();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 81:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_13;
      }
      jj_consume_token(81);
      ARG();
    }
  }

  final public void ARG() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _text:
    case _integer:
    case _double:
    case _bool:
    case _date:
    case _datetime:
      TIPO_DATO();
      break;
    case id:
      jj_consume_token(id);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(var);
  }

  final public void L_ID() throws ParseException {
    jj_consume_token(id);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 81:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_14;
      }
      jj_consume_token(81);
      jj_consume_token(id);
    }
  }

  final public void L_VAL() throws ParseException {
    VAL();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 81:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_15;
      }
      jj_consume_token(81);
      VAL();
    }
  }

  final public void VAL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case entero:
      jj_consume_token(entero);
      break;
    case doble:
      jj_consume_token(doble);
      break;
    case booleano:
      jj_consume_token(booleano);
      break;
    case cadena:
      jj_consume_token(cadena);
      break;
    case fecha:
      jj_consume_token(fecha);
      break;
    case fecha_hora:
      jj_consume_token(fecha_hora);
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void L_VAR() throws ParseException {
    jj_consume_token(var);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 81:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_16;
      }
      jj_consume_token(81);
      jj_consume_token(var);
    }
  }

  final public void USQL_OBJECT_NAME() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tabla:
      jj_consume_token(tabla);
      break;
    case base_datos:
      jj_consume_token(base_datos);
      break;
    case objeto:
      jj_consume_token(objeto);
      break;
    case usuario:
      jj_consume_token(usuario);
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TIPO_DATO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _text:
      jj_consume_token(_text);
      break;
    case _integer:
      jj_consume_token(_integer);
      break;
    case _double:
      jj_consume_token(_double);
      break;
    case _bool:
      jj_consume_token(_bool);
      break;
    case _date:
      jj_consume_token(_date);
      break;
    case _datetime:
      jj_consume_token(_datetime);
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void COMPLEMENTO_CAMPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case nulo:
      jj_consume_token(nulo);
      break;
    case no_nulo:
      jj_consume_token(no_nulo);
      break;
    case autoincrementable:
      jj_consume_token(autoincrementable);
      break;
    case llave_primaria:
      jj_consume_token(llave_primaria);
      break;
    case llave_foranea:
      jj_consume_token(llave_foranea);
      jj_consume_token(id);
      jj_consume_token(id);
      break;
    case unico:
      jj_consume_token(unico);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPREL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 99:
      jj_consume_token(99);
      break;
    case 100:
      jj_consume_token(100);
      break;
    case 101:
      jj_consume_token(101);
      break;
    case 102:
      jj_consume_token(102);
      break;
    case 103:
      jj_consume_token(103);
      break;
    case 104:
      jj_consume_token(104);
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(79)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(id)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(id)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserUSQLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[58];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x78000,0x78000,0x78000,0x1f80000,0x0,0x7e000000,0x0,0x7e00,0x7e00,0x1300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7e00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7e00,0x0,0x0,0x0,0x0,0x1380000,0x7e00,0x7e000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x300f0,0x300f0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0xf0,0x400,0x400,0x0,0xc000,0x1000,0x400,0x30000,0x0,0x0,0xcd800000,0x0,0x0,0x0,0x2000000,0x20000000,0x10000000,0x0,0x0,0x600000,0x600000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0xcd8000f0,0xcd8000f0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x804,0x804,0x0,0x0,0x20000,0x0,0x20000,0x800,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x80800,0x0,0x0,0x0,0x0,0x80800,0x80800,0x181f,0x40000,0x800,0x100000,0x0,0x0,0x0,0x460,0x3000000,0x0,0x0,0x10000000,0x20000000,0x40000000,0x0,0x80000000,0x80000000,0x80000,0x80000,0x0,0x100000,0x87e0,0x1818,0x7e0,0x181f,0x181f,0x20000,0x800,0x20000,0x20000,0x7e0,0x20000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f8,0x1,0x1,0x2,0x2,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f8,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserUSQL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserUSQL(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserUSQLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserUSQL(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserUSQLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserUSQL(ParserUSQLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserUSQLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[105];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 58; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 105; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                }
