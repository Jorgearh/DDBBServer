/* Generated By:JavaCC: Do not edit this line. ParserUSQL.java */
        package servidorfisql.interpretes.Analizadores.USQL.analizador;

        import servidorfisql.interpretes.Nodo;

        public class ParserUSQL implements ParserUSQLConstants {
                public static void main(String[] args) throws ParseException{
                                try{
                                        ParserUSQL parser = new ParserUSQL(System.in);
                                        parser.INI();
                                }catch(ParseException pe){
                                        System.err.println("Error en el analisis...");
                                        System.err.println(pe.getMessage());
                                }
                        }

  final public Nodo INI() throws ParseException {
        Nodo nodo;
    nodo = SENTENCIAS_USQL();
    jj_consume_token(0);
                                        {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo SENTENCIAS_USQL() throws ParseException {
        Nodo nodo = new Nodo("LSENT_USQL");
        Nodo sent;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case crear:
      case usar:
      case alterar:
      case eliminar:
      case insertar:
      case seleccionar:
      case actualizar:
      case borrar:
      case otorgar:
      case denegar:
      case backup:
      case restaurar:
      case imprimir:
      case id:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      sent = SENTENCIA_USQL();
      jj_consume_token(96);
                                         nodo.agregarHijo(sent);
    }
                                                                         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo SENTENCIA_USQL() throws ParseException {
        Nodo nodo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case crear:
    case usar:
    case alterar:
    case eliminar:
      nodo = DDL();
      break;
    case insertar:
    case seleccionar:
    case actualizar:
    case borrar:
      nodo = DML();
      break;
    case otorgar:
    case denegar:
      nodo = DCL();
      break;
    case id:
      nodo = CALL();
      break;
    case imprimir:
      nodo = SSL_IMPRIMIR();
      break;
    case backup:
      nodo = BACKUP();
      break;
    case restaurar:
      nodo = RESTAURAR();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
	SENTENCIAS_USQL DDL
**************************************************************************************************************/
  final public Nodo DDL() throws ParseException {
        Nodo nodo, aux;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case crear:
      jj_consume_token(crear);
      nodo = DDL_CREATE();
      break;
    case usar:
      jj_consume_token(usar);
      t = jj_consume_token(id);
                                                        nodo = new Nodo("USE");
                                                        nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
      break;
    case alterar:
      jj_consume_token(alterar);
      nodo = DDL_ALTER();
      break;
    case eliminar:
      jj_consume_token(eliminar);
      aux = USQL_OBJECT_NAME();
      t = jj_consume_token(id);
                                                                                                                nodo = new Nodo("DELETE");
                                                                                                                nodo.agregarHijo(aux);
                                                                                                                nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DDL CREATE
**************************************************************************************************************/
  final public Nodo DDL_CREATE() throws ParseException {
        Nodo nodo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case base_datos:
      nodo = DDL_CREATE_DB();
      break;
    case tabla:
      nodo = DDL_CREATE_TABLE();
      break;
    case objeto:
      nodo = DDL_CREATE_OBJECT();
      break;
    case procedimiento:
      nodo = DDL_CREATE_PROC();
      break;
    case funcion:
      nodo = DDL_CREATE_FUNC();
      break;
    case usuario:
      nodo = DDL_CREATE_USER();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE DB
**************************************************************************************************************/
  final public Nodo DDL_CREATE_DB() throws ParseException {
        Nodo nodo = new Nodo("CREATE_DB");
        Token t;
    jj_consume_token(base_datos);
    t = jj_consume_token(id);
                                                                nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
                                                                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE TABLE
**************************************************************************************************************/
  final public Nodo DDL_CREATE_TABLE() throws ParseException {
        Nodo nodo = new Nodo("CREATE_TABLE");
        Nodo lcampo;
        Token t;
    jj_consume_token(tabla);
    t = jj_consume_token(id);
    jj_consume_token(97);
    lcampo = L_DEC_CAMPO();
    jj_consume_token(98);
                nodo.agregarHijos(new Nodo("ID", t.image, t.beginLine, t.beginColumn), lcampo);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo L_DEC_CAMPO() throws ParseException {
        Nodo nodo = new Nodo("LCAMPO");
        Nodo campo;
    campo = DEC_CAMPO();
                                 nodo.agregarHijo(campo);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(99);
      campo = DEC_CAMPO();
                                   nodo.agregarHijo(campo);
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo DEC_CAMPO() throws ParseException {
        Nodo nodo = new Nodo("CAMPO");
        Nodo lcomp = new Nodo("LCOMP");
        Nodo tipo, ident, comp;
        Token t;
    tipo = TIPO_DATO_EXT();
    t = jj_consume_token(id);
                                                 ident = new Nodo("ID", t.image, t.beginLine, t.beginColumn);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case nulo:
      case no_nulo:
      case llave_primaria:
      case llave_foranea:
      case unico:
      case autoincrementable:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      comp = COMPLEMENTO_CAMPO();
                                      lcomp.agregarHijo(comp);
    }
                nodo.agregarHijo(tipo);
                nodo.agregarHijo(ident);
                nodo.agregarHijo(lcomp);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE OBJECT
**************************************************************************************************************/
  final public Nodo DDL_CREATE_OBJECT() throws ParseException {
        Nodo nodo = new Nodo("CREATE_OBJECT");
        Nodo  latr;
        Token t;
    jj_consume_token(objeto);
    t = jj_consume_token(id);
    jj_consume_token(97);
    latr = L_DEC_ATR();
    jj_consume_token(98);
                nodo.agregarHijos(new Nodo("ID", t.image, t.beginLine, t.beginColumn), latr);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo L_DEC_ATR() throws ParseException {
        Nodo nodo = new Nodo("LATR");
        Nodo atr;
    atr = DEC_ATRIBUTO();
                                         nodo.agregarHijo(atr);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(99);
      atr = DEC_ATRIBUTO();
                                         nodo.agregarHijo(atr);
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo DEC_ATRIBUTO() throws ParseException {
        Nodo nodo = new Nodo("ATR");
        Nodo tipo;
        Token t;
    tipo = TIPO_DATO();
    t = jj_consume_token(id);
                nodo.agregarHijos(tipo, new Nodo("ID", t.image, t.beginLine, t.beginColumn));
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE PROCEDURE
**************************************************************************************************************/
  final public Nodo DDL_CREATE_PROC() throws ParseException {
        Nodo nodo = new Nodo("PROC");
        Nodo larg = new Nodo("LARG");
        Nodo linstr;
        Token t;
    jj_consume_token(procedimiento);
    t = jj_consume_token(id);
    jj_consume_token(97);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _text:
    case _integer:
    case _double:
    case _bool:
    case _date:
    case _datetime:
    case id:
      larg = L_ARG();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(98);
    linstr = CUERPO();
                nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
                nodo.agregarHijos(larg, linstr);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE FUNCTION
**************************************************************************************************************/
  final public Nodo DDL_CREATE_FUNC() throws ParseException {
        Nodo nodo = new Nodo("FUNC");
        Nodo larg = new Nodo("LARG");
        Nodo linstr, tipo;
        Token t;
    jj_consume_token(funcion);
    t = jj_consume_token(id);
    jj_consume_token(97);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _text:
    case _integer:
    case _double:
    case _bool:
    case _date:
    case _datetime:
    case id:
      larg = L_ARG();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(98);
    tipo = TIPO_DATO_EXT();
    linstr = CUERPO();
                nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
                nodo.agregarHijos(larg, linstr);
                nodo.agregarHijo(tipo);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL CREATE USER
**************************************************************************************************************/
  final public Nodo DDL_CREATE_USER() throws ParseException {
        Nodo nodo = new Nodo("CREATE_USER");
        Token u, p;
    jj_consume_token(usuario);
    u = jj_consume_token(id);
    jj_consume_token(colocar);
    jj_consume_token(password);
    jj_consume_token(100);
    p = jj_consume_token(cadena);
                nodo.agregarHijo(new Nodo("ID", u.image, u.beginLine, u.beginColumn));
                nodo.agregarHijo(new Nodo("CAD", p.image.substring(1, p.image.length() - 1), p.beginLine, p.beginColumn));
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DDL ALTER
**************************************************************************************************************/
  final public Nodo DDL_ALTER() throws ParseException {
                    Nodo nodo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tabla:
      nodo = DDL_ALTER_TABLE();
      break;
    case objeto:
      nodo = DDL_ALTER_OBJECT();
      break;
    case usuario:
      nodo = DDL_ALTER_USER();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL ALTER TABLE
**************************************************************************************************************/
  final public Nodo DDL_ALTER_TABLE() throws ParseException {
        Nodo nodo, comp;
        Token t;
    jj_consume_token(tabla);
    t = jj_consume_token(id);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case agregar:
      comp = ADD();
                                                                         nodo = new Nodo("ALTER_TABLE_ADD");
      break;
    case quitar:
      comp = QUIT();
                                                                         nodo = new Nodo("ALTER_TABLE_QUIT");
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                        nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
                                                        nodo.agregarHijo(comp);
                                                        {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo ADD() throws ParseException {
              Nodo nodo;
    jj_consume_token(agregar);
    jj_consume_token(97);
    nodo = L_DEC_CAMPO();
    jj_consume_token(98);
                                                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo QUIT() throws ParseException {
               Nodo nodo;
    jj_consume_token(quitar);
    nodo = L_ID();
                                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL ALTER OBJECT
**************************************************************************************************************/
  final public Nodo DDL_ALTER_OBJECT() throws ParseException {
        Nodo nodo, comp;
        Token t;
    jj_consume_token(objeto);
    t = jj_consume_token(id);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case agregar:
      comp = ADD();
                                                                         nodo = new Nodo("ALTER_OBJECT_ADD");
      break;
    case quitar:
      comp = QUIT();
                                                                        nodo = new Nodo("ALTER_OBJECT_QUIT");
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                        nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
                                                        nodo.agregarHijo(comp);
                                                        {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
					SENTENCIAS_USQL DDL ALTER USER
**************************************************************************************************************/
  final public Nodo DDL_ALTER_USER() throws ParseException {
        Nodo nodo = new Nodo("ALTER_USER");
        Token u, p;
    jj_consume_token(usuario);
    u = jj_consume_token(id);
    jj_consume_token(cambiar);
    jj_consume_token(password);
    jj_consume_token(100);
    p = jj_consume_token(cadena);
                nodo.agregarHijo(new Nodo("ID", u.image, u.beginLine, u.beginColumn));
                nodo.agregarHijo(new Nodo("CAD", p.image.substring(1, p.image.length() - 1), p.beginLine, p.beginColumn));
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/**************************************************************************************************************
	SENTENCIAS_USQL DML
**************************************************************************************************************/
  final public Nodo DML() throws ParseException {
              Nodo nodo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case insertar:
      nodo = DML_INSERT();
      break;
    case actualizar:
      nodo = DML_UPDATE();
      break;
    case borrar:
      nodo = DML_DELETE();
      break;
    case seleccionar:
      nodo = DML_SELECT();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DML INSERT IN TABLE
**************************************************************************************************************/
  final public Nodo DML_INSERT() throws ParseException {
        Nodo nodo = new Nodo("INSERT");
        Nodo lid = new Nodo("LID");
        Nodo lexp;
        Token t;
    jj_consume_token(insertar);
    jj_consume_token(en);
    jj_consume_token(tabla);
    t = jj_consume_token(id);
    if (jj_2_1(2)) {
      jj_consume_token(97);
      lid = L_ID();
      jj_consume_token(98);
      jj_consume_token(valores);
    } else {
      ;
    }
    jj_consume_token(97);
    lexp = L_EXP();
    jj_consume_token(98);
                nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
                nodo.agregarHijos(lid, lexp);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DML UPDATE
**************************************************************************************************************/
  final public Nodo DML_UPDATE() throws ParseException {
        Nodo nodo = new Nodo("UPDATE");
        Nodo lid, lexp, cond = null;
        Token t;
    jj_consume_token(actualizar);
    jj_consume_token(tabla);
    t = jj_consume_token(id);
    jj_consume_token(97);
    lid = L_ID();
    jj_consume_token(98);
    jj_consume_token(valores);
    jj_consume_token(97);
    lexp = L_EXP();
    jj_consume_token(98);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case donde:
      jj_consume_token(donde);
      cond = COND();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
                nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
                nodo.agregarHijos(lid, lexp);
                if(cond != null) nodo.agregarHijo(cond);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DML DELETE
**************************************************************************************************************/
  final public Nodo DML_DELETE() throws ParseException {
        Nodo nodo = new Nodo("DELETE_FROM_TABLE");
        Nodo cond = null;
        Token t;
    jj_consume_token(borrar);
    jj_consume_token(en);
    jj_consume_token(tabla);
    t = jj_consume_token(id);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case donde:
      jj_consume_token(donde);
      cond = COND();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
                nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
                if(cond != null) nodo.agregarHijo(cond);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DML SELECT
**************************************************************************************************************/
  final public Nodo DML_SELECT() throws ParseException {
        Nodo nodo = new Nodo("SELECT");
        Nodo select, from;
        Nodo where = null, cond, col = null, order = null;
    jj_consume_token(seleccionar);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
      select = LACC_COL_TABLA();
      break;
    case prod:
      jj_consume_token(prod);
                                                                                 select = new Nodo("*");
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(de);
    from = L_ID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case donde:
      jj_consume_token(donde);
      cond = COND();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ordenar:
        jj_consume_token(ordenar);
        jj_consume_token(por);
        col = ACC_COL_TABLA();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case asc:
          jj_consume_token(asc);
                                                                                         order = new Nodo("ASC");
          break;
        case desc:
          jj_consume_token(desc);
                                                                                         order = new Nodo("DESC");
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
                                                                        where = new Nodo("WHERE");
                                                                        where.agregarHijo(cond);
                                                                        if(col != null) {
                                                                                Nodo aux = new Nodo("ORDENAR");
                                                                                aux.agregarHijos(col, order);
                                                                                where.agregarHijo(aux);
                                                                        }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
                nodo.agregarHijos(select, from);
                if(where != null) nodo.agregarHijo(where);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/**************************************************************************************************************
	SENTENCIAS_USQL DCL
**************************************************************************************************************/
  final public Nodo DCL() throws ParseException {
              Nodo nodo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case otorgar:
      nodo = DCL_OTORGAR();
      break;
    case denegar:
      nodo = DCL_DENEGAR();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DCL OTORGAR
**************************************************************************************************************/
  final public Nodo DCL_OTORGAR() throws ParseException {
        Nodo nodo = new Nodo("GRANT");
        Nodo objeto;
        Token u, db, o;
    jj_consume_token(otorgar);
    jj_consume_token(permisos);
    u = jj_consume_token(id);
    jj_consume_token(99);
    db = jj_consume_token(id);
    jj_consume_token(101);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
      o = jj_consume_token(id);
                                                                                                                                 objeto = new Nodo("ID", o.image, o.beginLine, o.beginColumn);
      break;
    case prod:
      jj_consume_token(prod);
                                                                                                                                 objeto = new Nodo("*");
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                nodo.agregarHijo(new Nodo("ID", u.image, u.beginLine, u.beginColumn));
                nodo.agregarHijo(new Nodo("ID", db.image, db.beginLine, db.beginColumn));
                nodo.agregarHijo(objeto);
                {if (true) return  nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL DCL DENEGAR
**************************************************************************************************************/
  final public Nodo DCL_DENEGAR() throws ParseException {
        Nodo nodo = new Nodo("GRANT");
        Nodo objeto;
        Token u, db, o;
    jj_consume_token(denegar);
    jj_consume_token(permisos);
    u = jj_consume_token(id);
    jj_consume_token(99);
    db = jj_consume_token(id);
    jj_consume_token(101);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
      o = jj_consume_token(id);
                                                                                                                                 objeto = new Nodo("ID", o.image, o.beginLine, o.beginColumn);
      break;
    case prod:
      jj_consume_token(prod);
                                                                                                                                 objeto = new Nodo("*");
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                nodo.agregarHijo(new Nodo("ID", u.image, u.beginLine, u.beginColumn));
                nodo.agregarHijo(new Nodo("ID", db.image, db.beginLine, db.beginColumn));
                nodo.agregarHijo(objeto);
                {if (true) return  nodo;}
    throw new Error("Missing return statement in function");
  }

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/**************************************************************************************************************
	SENTENCIAS_USQL SSL
**************************************************************************************************************/
  final public Nodo SSL() throws ParseException {
              Nodo nodo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case declarar:
      nodo = SSL_DEC_VAR_OBJ();
      jj_consume_token(96);
      break;
    case var:
      nodo = SSL_ASG_VAR_ATR();
      jj_consume_token(96);
      break;
    case si:
      nodo = SSL_SI();
      break;
    case selecciona:
      nodo = SSL_SELECCIONA();
      break;
    case para:
      nodo = SSL_PARA();
      break;
    case mientras:
      nodo = SSL_MIENTRAS();
      break;
    case detener:
      nodo = SSL_DETENER();
      jj_consume_token(96);
      break;
    case retorno:
      nodo = SSL_RETORNO();
      jj_consume_token(96);
      break;
    case imprimir:
      nodo = SSL_IMPRIMIR();
      jj_consume_token(96);
      break;
    case id:
      nodo = CALL();
      jj_consume_token(96);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL DECLARAR VARIABLE
**************************************************************************************************************/
  final public Nodo SSL_DEC_VAR_OBJ() throws ParseException {
        Nodo nodo = new Nodo("DEC");
        Nodo lvar, tipo, exp = null;
        Token t;
    jj_consume_token(declarar);
    lvar = L_VAR();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _text:
    case _integer:
    case _double:
    case _bool:
    case _date:
    case _datetime:
      tipo = TIPO_DATO();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 100:
        jj_consume_token(100);
        exp = EXPRESION();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      break;
    case id:
      t = jj_consume_token(id);
                                                                                                        tipo = new Nodo("TIPO", t.image, t.beginLine, t.beginColumn);
                                                                                                        nodo.setToken("INST");
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                        nodo.agregarHijos(lvar, tipo);
                                                                        if(exp != null) nodo.agregarHijo(exp);
                                                                        {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL ASIGNAR VARIABLE
**************************************************************************************************************/
  final public Nodo SSL_ASG_VAR_ATR() throws ParseException {
        Nodo nodo = new Nodo("=");
        Nodo obj, exp;
        Token v, ident;
    v = jj_consume_token(var);
                         obj = new Nodo("VAR", v.image.substring(1, v.image.length()), v.beginLine, v.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 101:
      jj_consume_token(101);
      ident = jj_consume_token(id);
                                                                                                                                                        obj = new Nodo(".");
                                                                                                                                                        obj.agregarHijo(new Nodo("VAR", v.image.substring(1, v.image.length()), v.beginLine, v.beginColumn));
                                                                                                                                                        obj.agregarHijo(new Nodo("ID", ident.image, ident.beginLine, ident.beginColumn));
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(100);
    exp = EXPRESION();
                                                                nodo.agregarHijos(obj, exp);
                                                                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL SI
**************************************************************************************************************/
  final public Nodo SSL_SI() throws ParseException {
        Nodo nodo = new Nodo("IF");
        Nodo cond, nt, nf = null;
    jj_consume_token(si);
    cond = CONDICION();
    nt = CUERPO();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case sino:
      jj_consume_token(sino);
      nf = CUERPO();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
                nodo.agregarHijos(cond, nt);
                if(nf != null) nodo.agregarHijo(nf);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL SELECCIONA
**************************************************************************************************************/
  final public Nodo SSL_SELECCIONA() throws ParseException {
        Nodo nodo = new Nodo("SWITCH");
        Nodo exp, lcase, def = null;
    jj_consume_token(selecciona);
    jj_consume_token(97);
    exp = EXPRESION();
    jj_consume_token(98);
    jj_consume_token(102);
    lcase = L_CASO();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case defecto:
      jj_consume_token(defecto);
      jj_consume_token(103);
      def = INSTRUCCIONES();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(104);
                if(def != null) lcase.agregarHijo(def);
                nodo.agregarHijos(exp, lcase);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo L_CASO() throws ParseException {
        Nodo nodo = new Nodo("LCASE");
        Nodo c;
    c = CASO();
                                 nodo.agregarHijo(c);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case caso:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_5;
      }
      c = CASO();
                         nodo.agregarHijo(c);
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo CASO() throws ParseException {
        Nodo nodo = new Nodo("CASE");
        Nodo val, lsent;
    jj_consume_token(caso);
    val = VAL_CASO();
    jj_consume_token(103);
    lsent = INSTRUCCIONES();
                nodo.agregarHijos(val, lsent);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo VAL_CASO() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cadena:
      t = jj_consume_token(cadena);
                         {if (true) return new Nodo("CAD", t.image.substring(1, t.image.length() - 1), t.beginLine, t.beginColumn);}
      break;
    case entero:
      t = jj_consume_token(entero);
                         {if (true) return new Nodo("ENT", t.image, t.beginLine, t.beginColumn);}
      break;
    case doble:
      t = jj_consume_token(doble);
                         {if (true) return new Nodo("DOB", t.image, t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL PARA
**************************************************************************************************************/
  final public Nodo SSL_PARA() throws ParseException {
        Nodo nodo = new Nodo("FOR");
        Nodo dec, cond, exp, lsent;
    jj_consume_token(para);
    jj_consume_token(97);
    dec = SSL_DEC_VAR_OBJ();
    jj_consume_token(96);
    cond = COND();
    jj_consume_token(96);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 105:
      jj_consume_token(105);
                                                 exp =new Nodo("++");
      break;
    case 106:
      jj_consume_token(106);
                                                 exp =new Nodo("--");
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                 exp.agregarHijo(new Nodo("VAR", dec.getHijo(0).getHijo(0).valor));
    jj_consume_token(98);
    lsent = CUERPO();
                nodo.agregarHijo(dec);
                nodo.agregarHijo(cond);
                nodo.agregarHijo(exp);
                nodo.agregarHijo(lsent);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL MIENTRAS
**************************************************************************************************************/
  final public Nodo SSL_MIENTRAS() throws ParseException {
        Nodo nodo = new Nodo("WHILE");
        Nodo cond, lsent;
    jj_consume_token(mientras);
    cond = CONDICION();
    lsent = CUERPO();
                nodo.agregarHijos(cond, lsent);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL DETENER
**************************************************************************************************************/
  final public Nodo SSL_DETENER() throws ParseException {
    jj_consume_token(detener);
                   {if (true) return new Nodo("BREAK");}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL RETORNAR
**************************************************************************************************************/
  final public Nodo SSL_RETORNO() throws ParseException {
        Nodo nodo = new Nodo("RETURN");
        Nodo exp;
    jj_consume_token(retorno);
    exp = EXPRESION();
                nodo.agregarHijo(exp);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL IMPRIMIR
**************************************************************************************************************/
  final public Nodo SSL_IMPRIMIR() throws ParseException {
        Nodo nodo = new Nodo("PRINT");
        Nodo exp;
    jj_consume_token(imprimir);
    jj_consume_token(97);
    exp = EXPRESION();
    jj_consume_token(98);
                nodo.agregarHijo(exp);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL FECHA
**************************************************************************************************************/
  final public Nodo SSL_FECHA() throws ParseException {
    jj_consume_token(get_fecha);
    jj_consume_token(97);
    jj_consume_token(98);
                             {if (true) return new Nodo("GET_DATE");}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL FECHA HORA
**************************************************************************************************************/
  final public Nodo SSL_FECHA_HORA() throws ParseException {
    jj_consume_token(get_fecha_hora);
    jj_consume_token(97);
    jj_consume_token(98);
                                  {if (true) return new Nodo("GET_DATE_TIME");}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL CONTAR
**************************************************************************************************************/
  final public Nodo SSL_CONTAR() throws ParseException {
        Nodo nodo = new Nodo("CONTAR");
        Nodo select;
    jj_consume_token(contar);
    jj_consume_token(97);
    jj_consume_token(107);
    select = DML_SELECT();
    jj_consume_token(108);
    jj_consume_token(98);
                nodo.agregarHijo(select);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL BACKUP
**************************************************************************************************************/
  final public Nodo BACKUP() throws ParseException {
        Nodo nodo;
        Token ddbb, file;
    jj_consume_token(backup);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case usqldump:
      jj_consume_token(usqldump);
                                                     nodo = new Nodo("BACKUP_USQLDUMP");
      break;
    case completo:
      jj_consume_token(completo);
                                                     nodo = new Nodo("BACKUP_COMPLETO");
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ddbb = jj_consume_token(id);
    file = jj_consume_token(id);
                                        nodo.agregarHijo(new Nodo("ID", ddbb.image, ddbb.beginLine, ddbb.beginColumn));
                                        nodo.agregarHijo(new Nodo("ID", file.image, file.beginLine, file.beginColumn));
                                        {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
			SENTENCIAS_USQL SSL RESTAURAR
**************************************************************************************************************/
  final public Nodo RESTAURAR() throws ParseException {
        Nodo nodo;
        Token t;
    jj_consume_token(restaurar);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case usqldump:
      jj_consume_token(usqldump);
                                                     nodo = new Nodo("RESTORE_USQLDUMP");
      break;
    case completo:
      jj_consume_token(completo);
                                                     nodo = new Nodo("RESTORE_COMPLETO");
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cadena:
      t = jj_consume_token(cadena);
                                                 nodo.agregarHijo(new Nodo("CAD", t.image.substring(1, t.image.length() - 1), t.beginLine, t.beginColumn));
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
                                 {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

/**************************************************************************************************************
			SENTENCIAS_USQL SSL EXPRESIONES
**************************************************************************************************************/
  final public Nodo EXPRESION() throws ParseException {
                    Nodo nodo;
    nodo = COND();
                         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo COND() throws ParseException {
               Nodo nodo;
    nodo = COND_OR();
                                 {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo COND_OR() throws ParseException {
        Nodo nodo, hijo;
        Token t;
    nodo = COND_AND();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case or:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(or);
      hijo = COND_AND();
                                                                                                                        Nodo aux = new Nodo(t.image, t.beginLine, t.beginColumn);
                                                                                                                        aux.agregarHijos(nodo, hijo);
                                                                                                                        nodo = aux;
    }
                                                 {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo COND_AND() throws ParseException {
        Nodo nodo, hijo;
        Token t;
    nodo = COND_NOT();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(and);
      hijo = COND_NOT();
                                                                                                                        Nodo aux = new Nodo(t.image, t.beginLine, t.beginColumn);
                                                                                                                        aux.agregarHijos(nodo, hijo);
                                                                                                                        nodo = aux;
    }
                                                 {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo COND_NOT() throws ParseException {
        Nodo nodo;
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case not:
      t = jj_consume_token(not);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    nodo = REL();
                                                                                        if(t != null){
                                                                                                Nodo result = new Nodo(t.image, t.beginLine, t.beginColumn);
                                                                                                result.agregarHijo(nodo);
                                                                                                nodo = result;
                                                                                        }
                                                                                 {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo REL() throws ParseException {
              Nodo nodo, hijo, op;
    nodo = AR_ADD();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case igual:
      case diferente:
      case menor:
      case menorigual:
      case mayor:
      case mayorigual:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_8;
      }
      op = OPREL();
      hijo = AR_ADD();
                                                                                                                        op.agregarHijos(nodo, hijo);
                                                                                                                        nodo = op;
    }
                                         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo AR_ADD() throws ParseException {
        Nodo nodo, hijo;
        Token t;
    nodo = AR_MUL();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mas:
      case menos:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mas:
        t = jj_consume_token(mas);
        break;
      case menos:
        t = jj_consume_token(menos);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      hijo = AR_MUL();
                                                                                        Nodo aux = new Nodo(t.image, t.beginLine, t.beginColumn);
                                                                                        aux.agregarHijos(nodo, hijo);
                                                                                        nodo = aux;
    }
                                         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo AR_MUL() throws ParseException {
        Nodo nodo, hijo;
        Token t;
    nodo = AR_POW();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case prod:
      case dividido:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case prod:
        t = jj_consume_token(prod);
        break;
      case dividido:
        t = jj_consume_token(dividido);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      hijo = AR_POW();
                                                                                        Nodo aux = new Nodo(t.image, t.beginLine, t.beginColumn);
                                                                                        aux.agregarHijos(nodo, hijo);
                                                                                        nodo = aux;
    }
                                         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo AR_POW() throws ParseException {
        Nodo nodo, hijo;
        Token t;
    nodo = AR_B();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case pow:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_11;
      }
      t = jj_consume_token(pow);
      hijo = AR_B();
                                                                                                Nodo aux = new Nodo(t.image, t.beginLine, t.beginColumn);
                                                                                                aux.agregarHijos(nodo, hijo);
                                                                                                nodo = aux;
    }
                                         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo AR_B() throws ParseException {
        Nodo nodo, aux;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case menos:
      t = jj_consume_token(menos);
      nodo = AR_B();
                                                                         aux = new Nodo("_", t.beginLine, t.beginColumn);
                                                                         aux.agregarHijo(nodo);
                                                                         nodo = aux;
      break;
    case 97:
      jj_consume_token(97);
      nodo = EXPRESION();
      jj_consume_token(98);
      break;
    case nulo:
    case entero:
    case doble:
    case booleano:
    case fecha:
    case fecha_hora:
    case cadena:
    case var:
      /*LOOKAHEAD(2) */nodo = VAL();
      break;
    default:
      jj_la1[43] = jj_gen;
      if (jj_2_2(3)) {
        nodo = CALL();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case id:
          t = jj_consume_token(id);
                         nodo = new Nodo("ID", t.image, t.beginLine, t.beginColumn);
          jj_consume_token(101);
          t = jj_consume_token(id);
                                                                                                                                                        aux = new Nodo("->");
                                                                                                                                                        aux.agregarHijo(nodo);
                                                                                                                                                        aux.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
                                                                                                                                                        nodo = aux;
          break;
        case get_fecha:
          nodo = SSL_FECHA();
          break;
        case get_fecha_hora:
          nodo = SSL_FECHA_HORA();
          break;
        case contar:
          nodo = SSL_CONTAR();
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo CALL() throws ParseException {
        Nodo nodo = new Nodo("CALL");
        Nodo lexp = null;
        Token t;
    t = jj_consume_token(id);
    jj_consume_token(97);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case nulo:
    case contar:
    case get_fecha:
    case get_fecha_hora:
    case menos:
    case not:
    case entero:
    case doble:
    case booleano:
    case fecha:
    case fecha_hora:
    case cadena:
    case id:
    case var:
    case 97:
      lexp = L_EXP();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    jj_consume_token(98);
                nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
                if(lexp != null) nodo.agregarHijo(lexp);
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************************************************************
								COMUN
**************************************************************************************************************/
  final public Nodo CONDICION() throws ParseException {
                    Nodo nodo;
    jj_consume_token(97);
    nodo = COND();
    jj_consume_token(98);
                               {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo CUERPO() throws ParseException {
                 Nodo nodo;
    jj_consume_token(102);
    nodo = INSTRUCCIONES();
    jj_consume_token(104);
                                        {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo INSTRUCCIONES() throws ParseException {
        Nodo nodo = new Nodo("LSENT");
        Nodo instr;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case crear:
      case usar:
      case alterar:
      case eliminar:
      case insertar:
      case seleccionar:
      case actualizar:
      case borrar:
      case declarar:
      case si:
      case para:
      case selecciona:
      case mientras:
      case detener:
      case retorno:
      case imprimir:
      case id:
      case var:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_12;
      }
      instr = INSTRUCCION();
                                   nodo.agregarHijo(instr);
    }
           {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo INSTRUCCION() throws ParseException {
                      Nodo nodo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case insertar:
    case seleccionar:
    case actualizar:
    case borrar:
      nodo = DML();
      jj_consume_token(96);
      break;
    case crear:
    case usar:
    case alterar:
    case eliminar:
      nodo = DDL();
      jj_consume_token(96);
      break;
    case declarar:
    case si:
    case para:
    case selecciona:
    case mientras:
    case detener:
    case retorno:
    case imprimir:
    case id:
    case var:
      nodo = SSL();
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo L_ARG() throws ParseException {
        Nodo nodo = new Nodo("LARG");
        Nodo arg;
    arg = ARG();
                                         nodo.agregarHijo(arg);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_13;
      }
      jj_consume_token(99);
      arg = ARG();
                                 nodo.agregarHijo(arg);
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo ARG() throws ParseException {
        Nodo nodo = new Nodo("ARG");
        Nodo tipo;
        Token t;
    tipo = TIPO_DATO_EXT();
    t = jj_consume_token(var);
                nodo.agregarHijo(tipo);
                nodo.agregarHijo(new Nodo("VAR", t.image.substring(1, t.image.length()), t.beginLine, t.beginColumn));
                {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo L_ID() throws ParseException {
        Nodo nodo = new Nodo("LID");
        Token t;
    t = jj_consume_token(id);
                                 nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_14;
      }
      jj_consume_token(99);
      t = jj_consume_token(id);
                         nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

///////////////////////////////////////////////////////<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  final public Nodo LACC_COL_TABLA() throws ParseException {
        Nodo nodo = new Nodo("LACC_COL");
        Nodo hijo;
    hijo = ACC_COL_TABLA();
                                         nodo.agregarHijo(hijo);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_15;
      }
      jj_consume_token(99);
      hijo = ACC_COL_TABLA();
                                         nodo.agregarHijo(hijo);
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo ACC_COL_TABLA() throws ParseException {
        Nodo nodo = new Nodo("->");
        Token t;
        Nodo hijo;
    t = jj_consume_token(id);
                         nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
    jj_consume_token(101);
    t = jj_consume_token(id);
                         nodo.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn)); {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

///////////////////////////////////////////////////////<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  final public Nodo VAL() throws ParseException {
        Nodo nodo;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case entero:
      t = jj_consume_token(entero);
                                 nodo = new Nodo("ENT", t.image, t.beginLine, t.beginColumn);
      break;
    case doble:
      t = jj_consume_token(doble);
                                 nodo = new Nodo("DOB", t.image, t.beginLine, t.beginColumn);
      break;
    case booleano:
      t = jj_consume_token(booleano);
                                 nodo = new Nodo("BOOL", t.image, t.beginLine, t.beginColumn);
      break;
    case nulo:
      t = jj_consume_token(nulo);
                                         nodo = new Nodo("NULO", t.image, t.beginLine, t.beginColumn);
      break;
    case cadena:
      t = jj_consume_token(cadena);
                                 nodo = new Nodo("CAD", t.image.substring(1, t.image.length() - 1), t.beginLine, t.beginColumn);
      break;
    case fecha:
      t = jj_consume_token(fecha);
                                 nodo = new Nodo("FECHA", t.image.substring(1, t.image.length() - 1), t.beginLine, t.beginColumn);
      break;
    case fecha_hora:
      t = jj_consume_token(fecha_hora);
                                 nodo = new Nodo("FECHAHORA", t.image.substring(1, t.image.length() - 1), t.beginLine, t.beginColumn);
      break;
    case var:
      t = jj_consume_token(var);
                                         nodo = new Nodo("VAR", t.image.substring(1, t.image.length()), t.beginLine, t.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        jj_consume_token(101);
        t = jj_consume_token(id);
                                                Nodo aux = new Nodo(".");
                                                aux.agregarHijo(nodo);
                                                aux.agregarHijo(new Nodo("ID", t.image, t.beginLine, t.beginColumn));
                                                nodo = aux;
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo L_VAR() throws ParseException {
        Nodo nodo = new Nodo("LVAR");
        Token t;
    t = jj_consume_token(var);
                                 nodo.agregarHijo(new Nodo("VAR", t.image.substring(1, t.image.length()), t.beginLine, t.beginColumn));
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_16;
      }
      jj_consume_token(99);
      t = jj_consume_token(var);
                         nodo.agregarHijo(new Nodo("VAR", t.image.substring(1, t.image.length()), t.beginLine, t.beginColumn));
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo L_EXP() throws ParseException {
        Nodo nodo = new Nodo("LEXP");
        Nodo e;
    e = EXPRESION();
                                         nodo.agregarHijo(e);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_17;
      }
      jj_consume_token(99);
      e = EXPRESION();
                                 nodo.agregarHijo(e);
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo USQL_OBJECT_NAME() throws ParseException {
                           Nodo nodo = new Nodo("USQL_OBJECT");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tabla:
      jj_consume_token(tabla);
                                 nodo.setValor("TABLE");
      break;
    case base_datos:
      jj_consume_token(base_datos);
                         nodo.setValor("DDBB");
      break;
    case objeto:
      jj_consume_token(objeto);
                                 nodo.setValor("OBJECT");
      break;
    case usuario:
      jj_consume_token(usuario);
                                 nodo.setValor("USER");
      break;
    case procedimiento:
      jj_consume_token(procedimiento);
                         nodo.setValor("PROC");

      break;
    case funcion:
      jj_consume_token(funcion);
                                 nodo.setValor("FUNC");
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo TIPO_DATO() throws ParseException {
                    Nodo nodo = new Nodo("TIPO");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _text:
      jj_consume_token(_text);
                                 nodo.setValor("text");
      break;
    case _integer:
      jj_consume_token(_integer);
                                 nodo.setValor("integer");
      break;
    case _double:
      jj_consume_token(_double);
                                 nodo.setValor("double");
      break;
    case _bool:
      jj_consume_token(_bool);
                                 nodo.setValor("bool");
      break;
    case _date:
      jj_consume_token(_date);
                                 nodo.setValor("date");
      break;
    case _datetime:
      jj_consume_token(_datetime);
                         nodo.setValor("datetime");
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo TIPO_DATO_EXT() throws ParseException {
        Nodo nodo;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _text:
    case _integer:
    case _double:
    case _bool:
    case _date:
    case _datetime:
      nodo = TIPO_DATO();
      break;
    case id:
      t = jj_consume_token(id);
                         nodo = new Nodo("ID", t.image, t.beginLine, t.beginColumn);
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo COMPLEMENTO_CAMPO() throws ParseException {
        Nodo nodo;
        Token c, r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case nulo:
      jj_consume_token(nulo);
                                                                         nodo = new Nodo("NULO");
      break;
    case no_nulo:
      jj_consume_token(no_nulo);
                                                                         nodo = new Nodo("NO_NULO");
      break;
    case autoincrementable:
      jj_consume_token(autoincrementable);
                                                         nodo = new Nodo("AUTOINC");
      break;
    case llave_primaria:
      jj_consume_token(llave_primaria);
                                                                 nodo = new Nodo("PK");
      break;
    case llave_foranea:
      jj_consume_token(llave_foranea);
      c = jj_consume_token(id);
      r = jj_consume_token(id);
                                                                                        nodo = new Nodo("FK");
                                                                                        nodo.agregarHijo(new Nodo("ID", c.image, c.beginLine, c.beginColumn));
                                                                                        nodo.agregarHijo(new Nodo("ID", r.image, r.beginLine, r.beginColumn));
      break;
    case unico:
      jj_consume_token(unico);
                                                                         nodo = new Nodo("UNIQUE");
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo OPREL() throws ParseException {
        Nodo nodo;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case igual:
      t = jj_consume_token(igual);
      break;
    case diferente:
      t = jj_consume_token(diferente);
      break;
    case menor:
      t = jj_consume_token(menor);
      break;
    case menorigual:
      t = jj_consume_token(menorigual);
      break;
    case mayor:
      t = jj_consume_token(mayor);
      break;
    case mayorigual:
      t = jj_consume_token(mayorigual);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new Nodo(t.image, t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(contar)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(menos)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(get_fecha_hora)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(97)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(get_fecha)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(id)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(id)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(var)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(fecha_hora)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(fecha)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(cadena)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(nulo)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(booleano)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(doble)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(entero)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(97)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_21()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserUSQLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x780000,0x780000,0x780000,0x1f800000,0x0,0xe0000000,0x0,0x7e000,0x7e000,0x13000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7e000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x20000000,0x780000,0x780000,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x1f800000,0x7e000,0x7e000,0xe0000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1b00f00,0x1b00f00,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x60,0x60,0xf00,0x4000,0x4000,0x0,0xc0000,0x10000,0x4000,0x300000,0x0,0x0,0xd8000000,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x6000000,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd8000f00,0xd8000f00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x20000040,0x20000040,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000800,0x0,0x0,0x0,0x0,0x20000800,0x20000800,0x6000005c,0x0,0x20000000,0x0,0x0,0x2,0x1,0x11800000,0x0,0x0,0x0,0x10000000,0x100000,0x200000,0x400000,0xfc000,0x600,0x600,0x1800,0x1800,0x2000,0x5f800400,0x200001a0,0x7fc005a0,0x6000005c,0x6000005c,0x0,0x0,0x0,0x0,0x5f800000,0x0,0x0,0x0,0x0,0x20000000,0x0,0xfc000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x20,0x0,0x0,0x0,0x0,0x600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x8,0x8,0x8,0x20,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserUSQL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserUSQL(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserUSQLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserUSQL(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserUSQLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserUSQL(ParserUSQLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserUSQLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[109];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 60; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 109; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                }
